using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace hackerRank
{
    class CutSticks
    {
        public void Execute()
        {
            //int[] arr = { 5, 4, 4, 2, 2, 8 };
            //int[] resExp = { 6, 4, 2, 1 };

            //int[] arr = { 1, 2, 3, 4, 3, 3, 2, 1 };
            //int[] resExp = { 8, 6, 4, 1 };

            //int[] arr = { 1, 2, 3 };
            //int[] resExp = { 3, 2, 1 };

            //int[] arr = { 1, 13, 3, 8, 14, 9, 4, 4 };
            //int[] resExp = { 8, 7, 6, 4, 3, 2, 1 };

            //int[] arr = { 8, 8, 14, 10, 3, 5, 14, 12, };
            //int[] resExp = { 8, 7, 6, 4, 3, 2 };

            //int[] arr = { 23, 74, 26, 23, 92, 92, 44, 13, 34, 23, 69, 4, 19, 94, 94, 38, 14, 9, 51, 98, 72, 46, 17, 25, 21, 87, 99, 50, 59, 53, 82, 24, 93, 16, 88, 52, 14, 38, 27, 7, 18, 81, 13, 75, 80, 11, 29, 39, 37, 78, 55, 17, 78, 12, 77, 84, 63, 29, 68, 32, 17, 55, 31, 30, 3, 17, 99, 6, 45, 81, 75, 31, 50, 93, 66, 98, 94, 59, 68, 30, 98, 57, 83, 75, 68, 85, 98, 76, 91, 23, 53, 42, 72, 77 };
            //int[] resExp = { 94, 93, 92, 91, 90, 89, 88, 87, 85, 83, 82, 78, 77, 76, 75, 71, 70, 69, 68, 67, 65, 63, 61, 60, 59, 58, 56, 55, 54, 53, 52, 51, 49, 48, 47, 45, 43, 42, 40, 39, 38, 35, 34, 32, 31, 28, 27, 25, 23, 22, 20, 19, 18, 17, 16, 15, 14, 13, 11, 9, 6, 2 };

            int[] arr = {};
            int[] resExp = { 1000 };

            int[] result = cutTheSticks(arr);

            if (string.Join(" ", resExp) != string.Join(" ", result))
            {
                Console.WriteLine("Errore - Expected: " + string.Join(" ", resExp) + " - now: " + string.Join(" ", result));
            }
            else
            {
                Console.WriteLine("Perfetto!!!");
            }

            Console.WriteLine(string.Join(" ", result));
        }

        static int[] cutTheSticks(int[] arr)
        {
            List<int> res = new List<int>();
            List<int> com = new List<int>(arr);
            int min = 0;
            int lastCount = 0;
            int nextMin = com[0];
            bool allEq = true;

            for (int i = 0; i < (com.Count - 1); i++)
            {
                if (arr[i] < nextMin)
                {
                    nextMin = arr[i];
                }

                for (int j = i + 1; j < com.Count && allEq; j++)
                {
                    if (com[i] != com[j])
                    {
                        allEq = false;
                        break;
                    }
                }
            }

            res.Add(com.Count);

            while (com.Count > 1 && !allEq)
            {
                min = nextMin;
                for (int i = 0; i < com.Count; i++)
                {
                    com[i] = com[i] - min;

                    if (com[i] < nextMin && com[i] != 0)
                    {
                        nextMin = com[i];
                    }
                }

                com = com.Where((item, index) => item != 0).ToList();

                allEq = true;
                for (int i = 0; i < (com.Count - 1) && allEq; i++)
                {
                    for (int j = i + 1; j < com.Count && allEq; j++)
                    {
                        if (arr[i] != arr[j])
                        {
                            allEq = false;
                            break;
                        }
                    }
                }

                if (allEq)
                {
                    if (com.Count == 0)
                    {
                        return res.ToArray();
                    }
                    res.Add(com.Count);
                    com.RemoveAll(item => item >= 0);
                    lastCount = com.Count;
                }

                if (lastCount != com.Count)
                {
                    lastCount = com.Count;
                    res.Add(com.Count);
                }
            }

            return res.ToArray();
        }
    }
}
